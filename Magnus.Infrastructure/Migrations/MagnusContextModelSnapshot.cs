// <auto-generated />
using System;
using Magnus.Infrastructure.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Magnus.Infrastructure.Migrations
{
    [DbContext(typeof(MagnusContext))]
    partial class MagnusContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Magnus.Core.Entities.AccountsPayable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccountPayableStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("CostCenterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Document")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date");

                    b.Property<int>("Installment")
                        .HasColumnType("integer");

                    b.Property<decimal>("Interest")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("timestamp");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("PaymentValue")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<Guid?>("UserPaymentId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.ToTable("AccountsPayable", (string)null);
                });

            modelBuilder.Entity("Magnus.Core.Entities.AccountsPayableOccurrence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountsPayableId")
                        .HasColumnType("uuid");

                    b.Property<string>("Occurrence")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AccountsPayableId");

                    b.ToTable("AccountsPayableOccurrence", (string)null);
                });

            modelBuilder.Entity("Magnus.Core.Entities.AccountsReceivable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("CostCenter")
                        .IsRequired()
                        .HasColumnType("varchar(8)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Document")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date");

                    b.Property<int>("Installment")
                        .HasColumnType("integer");

                    b.Property<decimal>("Interest")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Observation")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateOnly?>("PaymentDate")
                        .HasColumnType("date");

                    b.Property<decimal>("PaymentValue")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid?>("SaleReceiptInstallmentId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.ToTable("AccountsReceivable", (string)null);
                });

            modelBuilder.Entity("Magnus.Core.Entities.AppConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AmountToDiscount")
                        .HasColumnType("integer");

                    b.Property<string>("CostCenterSale")
                        .IsRequired()
                        .HasColumnType("varchar(8)");

                    b.Property<int>("DaysValidityEstimate")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("AppConfiguration", (string)null);
                });

            modelBuilder.Entity("Magnus.Core.Entities.AuditProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,3)");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<int>("Document")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("timestamp");

                    b.Property<Guid?>("SaleId")
                        .HasColumnType("uuid");

                    b.Property<int>("Serie")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(10,3)");

                    b.Property<Guid?>("TransferhouseId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("AuditProduct", (string)null);
                });

            modelBuilder.Entity("Magnus.Core.Entities.Bar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(14)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Bar", (string)null);
                });

            modelBuilder.Entity("Magnus.Core.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Occupation")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RegisterNumber")
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("Magnus.Core.Entities.ClientPhone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientPhone", (string)null);
                });

            modelBuilder.Entity("Magnus.Core.Entities.ClientSocialMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientSocialMedia", (string)null);
                });

            modelBuilder.Entity("Magnus.Core.Entities.CostCenter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(8)");

                    b.Property<Guid>("CostCenterSubGroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CostCenterSubGroupId");

                    b.ToTable("CostCenter", (string)null);
                });

            modelBuilder.Entity("Magnus.Core.Entities.CostCenterGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(2)");

                    b.Property<int>("CostcenterGroupType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CostCenterGroup", (string)null);
                });

            modelBuilder.Entity("Magnus.Core.Entities.CostCenterSubGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<Guid>("CostCenterGroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CostCenterGroupId");

                    b.ToTable("CostCenterSubGroup", (string)null);
                });

            modelBuilder.Entity("Magnus.Core.Entities.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Code"));

                    b.Property<string>("Crm")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Doctor", (string)null);
                });

            modelBuilder.Entity("Magnus.Core.Entities.Estimate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("ClientName")
                        .HasColumnType("text");

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Code"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("EstimateStatus")
                        .HasColumnType("integer");

                    b.Property<decimal>("FinantialDiscount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Freight")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid?>("FreightId")
                        .HasColumnType("uuid");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(300)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ValiditAt")
                        .HasColumnType("timestamp");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Estimates", (string)null);
                });

            modelBuilder.Entity("Magnus.Core.Entities.EstimateItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("EstimateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("EstimateId");

                    b.ToTable("EstimateItem", (string)null);
                });

            modelBuilder.Entity("Magnus.Core.Entities.EstimateReceipt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EstimateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReceiptId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EstimateId");

                    b.HasIndex("ReceiptId");

                    b.ToTable("EstimateReceipt", (string)null);
                });

            modelBuilder.Entity("Magnus.Core.Entities.EstimateReceiptInstallment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date");

                    b.Property<Guid>("EstimateReceiptId")
                        .HasColumnType("uuid");

                    b.Property<int>("Installment")
                        .HasColumnType("integer");

                    b.Property<decimal>("Interest")
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("timestamp");

                    b.Property<decimal>("PaymentValue")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("EstimateReceiptId");

                    b.ToTable("EstimateReceiptInstallment", (string)null);
                });

            modelBuilder.Entity("Magnus.Core.Entities.Freight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Freights");
                });

            modelBuilder.Entity("Magnus.Core.Entities.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CostCenterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("DateEntry")
                        .HasColumnType("timestamp");

                    b.Property<decimal>("Deduction")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Freight")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("InvoiceSituation")
                        .HasColumnType("integer");

                    b.Property<string>("Key")
                        .HasColumnType("varchar(44)");

                    b.Property<Guid>("LaboratoryId")
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Serie")
                        .HasColumnType("integer");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("UpdateFinantial")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.ToTable("Invoice", (string)null);
                });

            modelBuilder.Entity("Magnus.Core.Entities.InvoiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(12,3)");

                    b.Property<bool>("Bonus")
                        .HasColumnType("boolean");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Lot")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("ProductInternalCode")
                        .HasColumnType("integer");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateOnly>("Validate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceItem", (string)null);
                });

            modelBuilder.Entity("Magnus.Core.Entities.InvoicePayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("PaymentId");

                    b.ToTable("InvoicePayment", (string)null);
                });

            modelBuilder.Entity("Magnus.Core.Entities.InvoicePaymentInstallment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date");

                    b.Property<int>("Installment")
                        .HasColumnType("integer");

                    b.Property<decimal>("Interest")
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid>("InvoicePaymentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("timestamp");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("InvoicePaymentId");

                    b.ToTable("InvoicePaymentInstallment", (string)null);
                });

            modelBuilder.Entity("Magnus.Core.Entities.Laboratory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Code"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Laboratory", (string)null);
                });

            modelBuilder.Entity("Magnus.Core.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("Magnus.Core.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("ApplyPriceRule")
                        .HasColumnType("boolean");

                    b.Property<int>("InternalCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InternalCode"));

                    b.Property<Guid>("LaboratoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("Magnus.Core.Entities.ProductPriceTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("MaximumAmount")
                        .HasColumnType("integer");

                    b.Property<int>("MinimalAmount")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPriceTable", (string)null);
                });

            modelBuilder.Entity("Magnus.Core.Entities.ProductStock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,3)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("integer");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ProductStock", (string)null);
                });

            modelBuilder.Entity("Magnus.Core.Entities.Receipt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("InIstallments")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Increase")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Receipt", (string)null);
                });

            modelBuilder.Entity("Magnus.Core.Entities.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp");

                    b.Property<int>("Document")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Document"));

                    b.Property<Guid?>("EstimateId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("FinantialDiscount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Freight")
                        .HasColumnType("numeric");

                    b.Property<Guid>("FreightId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReasonCancel")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.ToTable("Sale", (string)null);
                });

            modelBuilder.Entity("Magnus.Core.Entities.SaleItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("SaleId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleItem", (string)null);
                });

            modelBuilder.Entity("Magnus.Core.Entities.SaleReceipt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReceiptId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SaleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReceiptId");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleReceipt", (string)null);
                });

            modelBuilder.Entity("Magnus.Core.Entities.SaleReceiptInstallment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date");

                    b.Property<int>("Installment")
                        .HasColumnType("integer");

                    b.Property<decimal>("Interest")
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("timestamp");

                    b.Property<decimal>("PaymentValue")
                        .HasColumnType("numeric");

                    b.Property<byte[]>("ProofImage")
                        .HasColumnType("bytea");

                    b.Property<Guid>("SaleReceiptId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("SaleReceiptId");

                    b.ToTable("SaleReceiptInstallments", (string)null);
                });

            modelBuilder.Entity("Magnus.Core.Entities.Seller", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Seller", (string)null);
                });

            modelBuilder.Entity("Magnus.Core.Entities.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Supplier", (string)null);
                });

            modelBuilder.Entity("Magnus.Core.Entities.TransferWarehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("WarehouseDestinyId")
                        .HasColumnType("integer");

                    b.Property<string>("WarehouseDestinyName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("WarehouseOriginId")
                        .HasColumnType("integer");

                    b.Property<string>("WarehouseOriginName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("TransferWarehouse", (string)null);
                });

            modelBuilder.Entity("Magnus.Core.Entities.TransferWarehouseItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,3)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("ProductInternalCode")
                        .HasColumnType("integer");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("TransferWarehouseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TransferWarehouseId");

                    b.ToTable("TransferWarehouseItem", (string)null);
                });

            modelBuilder.Entity("Magnus.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FinalDate")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("InitialDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Magnus.Core.Entities.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Code"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Warehouse", (string)null);
                });

            modelBuilder.Entity("Magnus.Core.Entities.AccountsPayable", b =>
                {
                    b.HasOne("Magnus.Core.Entities.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Magnus.Core.Entities.AccountsPayableOccurrence", b =>
                {
                    b.HasOne("Magnus.Core.Entities.AccountsPayable", "AccountsPayable")
                        .WithMany("Occurrences")
                        .HasForeignKey("AccountsPayableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountsPayable");
                });

            modelBuilder.Entity("Magnus.Core.Entities.Bar", b =>
                {
                    b.HasOne("Magnus.Core.Entities.Product", null)
                        .WithMany("Bars")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Magnus.Core.Entities.Client", b =>
                {
                    b.OwnsOne("Magnus.Core.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("ClientId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("varchar(50)")
                                .HasColumnName("City");

                            b1.Property<string>("Complement")
                                .IsRequired()
                                .HasColumnType("varchar(50)")
                                .HasColumnName("Complement");

                            b1.Property<string>("Neighborhood")
                                .IsRequired()
                                .HasColumnType("varchar(50)")
                                .HasColumnName("Neighborhood");

                            b1.Property<int>("Number")
                                .HasColumnType("integer")
                                .HasColumnName("Number");

                            b1.Property<string>("PublicPlace")
                                .IsRequired()
                                .HasColumnType("varchar(100)")
                                .HasColumnName("PublicPlace");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("varchar(2)")
                                .HasColumnName("State");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("varchar(9)");

                            b1.HasKey("ClientId");

                            b1.ToTable("Client");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.OwnsOne("Magnus.Core.ValueObjects.Document", "Document", b1 =>
                        {
                            b1.Property<Guid>("ClientId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("varchar(14)")
                                .HasColumnName("Document");

                            b1.HasKey("ClientId");

                            b1.ToTable("Client");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.OwnsOne("Magnus.Core.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("ClientId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("varchar(100)")
                                .HasColumnName("Email");

                            b1.HasKey("ClientId");

                            b1.ToTable("Client");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Document")
                        .IsRequired();

                    b.Navigation("Email");
                });

            modelBuilder.Entity("Magnus.Core.Entities.ClientPhone", b =>
                {
                    b.HasOne("Magnus.Core.Entities.Client", null)
                        .WithMany("Phones")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Magnus.Core.ValueObjects.Phone", "Phone", b1 =>
                        {
                            b1.Property<Guid>("ClientPhoneId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("varchar(15)")
                                .HasColumnName("Number");

                            b1.HasKey("ClientPhoneId");

                            b1.ToTable("ClientPhone");

                            b1.WithOwner()
                                .HasForeignKey("ClientPhoneId");
                        });

                    b.Navigation("Phone")
                        .IsRequired();
                });

            modelBuilder.Entity("Magnus.Core.Entities.ClientSocialMedia", b =>
                {
                    b.HasOne("Magnus.Core.Entities.Client", null)
                        .WithMany("SocialMedias")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Magnus.Core.Entities.CostCenter", b =>
                {
                    b.HasOne("Magnus.Core.Entities.CostCenterSubGroup", "CostCenterSubGroup")
                        .WithMany("CostCenters")
                        .HasForeignKey("CostCenterSubGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CostCenterSubGroup");
                });

            modelBuilder.Entity("Magnus.Core.Entities.CostCenterSubGroup", b =>
                {
                    b.HasOne("Magnus.Core.Entities.CostCenterGroup", "CostCenterGroup")
                        .WithMany("CostCenterSubGroups")
                        .HasForeignKey("CostCenterGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CostCenterGroup");
                });

            modelBuilder.Entity("Magnus.Core.Entities.Estimate", b =>
                {
                    b.HasOne("Magnus.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Magnus.Core.Entities.EstimateItem", b =>
                {
                    b.HasOne("Magnus.Core.Entities.Estimate", null)
                        .WithMany("Items")
                        .HasForeignKey("EstimateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Magnus.Core.Entities.EstimateReceipt", b =>
                {
                    b.HasOne("Magnus.Core.Entities.Estimate", null)
                        .WithMany("Receipts")
                        .HasForeignKey("EstimateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Magnus.Core.Entities.Receipt", "Receipt")
                        .WithMany()
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("Magnus.Core.Entities.EstimateReceiptInstallment", b =>
                {
                    b.HasOne("Magnus.Core.Entities.EstimateReceipt", null)
                        .WithMany("Installments")
                        .HasForeignKey("EstimateReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Magnus.Core.Entities.InvoiceItem", b =>
                {
                    b.HasOne("Magnus.Core.Entities.Invoice", "Invoice")
                        .WithMany("Items")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Magnus.Core.Entities.InvoicePayment", b =>
                {
                    b.HasOne("Magnus.Core.Entities.Invoice", "Invoice")
                        .WithMany("InvoicePayments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Magnus.Core.Entities.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Magnus.Core.Entities.InvoicePaymentInstallment", b =>
                {
                    b.HasOne("Magnus.Core.Entities.InvoicePayment", "InvoicePayment")
                        .WithMany("Installments")
                        .HasForeignKey("InvoicePaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvoicePayment");
                });

            modelBuilder.Entity("Magnus.Core.Entities.ProductPriceTable", b =>
                {
                    b.HasOne("Magnus.Core.Entities.Product", null)
                        .WithMany("ProductPriceTables")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Magnus.Core.Entities.SaleItem", b =>
                {
                    b.HasOne("Magnus.Core.Entities.Sale", "Sale")
                        .WithMany("Items")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Magnus.Core.Entities.SaleReceipt", b =>
                {
                    b.HasOne("Magnus.Core.Entities.Receipt", "Receipt")
                        .WithMany()
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Magnus.Core.Entities.Sale", null)
                        .WithMany("Receipts")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("Magnus.Core.Entities.SaleReceiptInstallment", b =>
                {
                    b.HasOne("Magnus.Core.Entities.SaleReceipt", "SaleReceipt")
                        .WithMany("Installments")
                        .HasForeignKey("SaleReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaleReceipt");
                });

            modelBuilder.Entity("Magnus.Core.Entities.Seller", b =>
                {
                    b.OwnsOne("Magnus.Core.ValueObjects.Document", "Document", b1 =>
                        {
                            b1.Property<Guid>("SellerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("varchar(14)")
                                .HasColumnName("Document");

                            b1.HasKey("SellerId");

                            b1.ToTable("Seller");

                            b1.WithOwner()
                                .HasForeignKey("SellerId");
                        });

                    b.OwnsOne("Magnus.Core.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("SellerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("varchar(100)")
                                .HasColumnName("Email");

                            b1.HasKey("SellerId");

                            b1.ToTable("Seller");

                            b1.WithOwner()
                                .HasForeignKey("SellerId");
                        });

                    b.OwnsOne("Magnus.Core.ValueObjects.Phone", "Phone", b1 =>
                        {
                            b1.Property<Guid>("SellerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("varchar(15)")
                                .HasColumnName("Number");

                            b1.HasKey("SellerId");

                            b1.ToTable("Seller");

                            b1.WithOwner()
                                .HasForeignKey("SellerId");
                        });

                    b.Navigation("Document");

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Phone")
                        .IsRequired();
                });

            modelBuilder.Entity("Magnus.Core.Entities.Supplier", b =>
                {
                    b.OwnsOne("Magnus.Core.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("SupplierId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("varchar(50)")
                                .HasColumnName("City");

                            b1.Property<string>("Complement")
                                .IsRequired()
                                .HasColumnType("varchar(50)")
                                .HasColumnName("Complement");

                            b1.Property<string>("Neighborhood")
                                .IsRequired()
                                .HasColumnType("varchar(50)")
                                .HasColumnName("Neighborhood");

                            b1.Property<int>("Number")
                                .HasColumnType("integer")
                                .HasColumnName("AddressNumber");

                            b1.Property<string>("PublicPlace")
                                .IsRequired()
                                .HasColumnType("varchar(100)")
                                .HasColumnName("PublicPlace");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("varchar(2)")
                                .HasColumnName("State");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("varchar(9)");

                            b1.HasKey("SupplierId");

                            b1.ToTable("Supplier");

                            b1.WithOwner()
                                .HasForeignKey("SupplierId");
                        });

                    b.OwnsOne("Magnus.Core.ValueObjects.Document", "Document", b1 =>
                        {
                            b1.Property<Guid>("SupplierId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("varchar(14)")
                                .HasColumnName("Document");

                            b1.HasKey("SupplierId");

                            b1.ToTable("Supplier");

                            b1.WithOwner()
                                .HasForeignKey("SupplierId");
                        });

                    b.OwnsOne("Magnus.Core.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("SupplierId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Address")
                                .HasColumnType("varchar(100)")
                                .HasColumnName("Email");

                            b1.HasKey("SupplierId");

                            b1.ToTable("Supplier");

                            b1.WithOwner()
                                .HasForeignKey("SupplierId");
                        });

                    b.OwnsOne("Magnus.Core.ValueObjects.Phone", "Phone", b1 =>
                        {
                            b1.Property<Guid>("SupplierId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("varchar(15)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("SupplierId");

                            b1.ToTable("Supplier");

                            b1.WithOwner()
                                .HasForeignKey("SupplierId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Document")
                        .IsRequired();

                    b.Navigation("Email");

                    b.Navigation("Phone");
                });

            modelBuilder.Entity("Magnus.Core.Entities.TransferWarehouseItem", b =>
                {
                    b.HasOne("Magnus.Core.Entities.TransferWarehouse", "TransferWarehouse")
                        .WithMany("Items")
                        .HasForeignKey("TransferWarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransferWarehouse");
                });

            modelBuilder.Entity("Magnus.Core.Entities.User", b =>
                {
                    b.OwnsOne("Magnus.Core.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("varchar(100)")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();
                });

            modelBuilder.Entity("Magnus.Core.Entities.Warehouse", b =>
                {
                    b.HasOne("Magnus.Core.Entities.User", "User")
                        .WithOne("Warehouse")
                        .HasForeignKey("Magnus.Core.Entities.Warehouse", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Magnus.Core.Entities.AccountsPayable", b =>
                {
                    b.Navigation("Occurrences");
                });

            modelBuilder.Entity("Magnus.Core.Entities.Client", b =>
                {
                    b.Navigation("Phones");

                    b.Navigation("SocialMedias");
                });

            modelBuilder.Entity("Magnus.Core.Entities.CostCenterGroup", b =>
                {
                    b.Navigation("CostCenterSubGroups");
                });

            modelBuilder.Entity("Magnus.Core.Entities.CostCenterSubGroup", b =>
                {
                    b.Navigation("CostCenters");
                });

            modelBuilder.Entity("Magnus.Core.Entities.Estimate", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Receipts");
                });

            modelBuilder.Entity("Magnus.Core.Entities.EstimateReceipt", b =>
                {
                    b.Navigation("Installments");
                });

            modelBuilder.Entity("Magnus.Core.Entities.Invoice", b =>
                {
                    b.Navigation("InvoicePayments");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("Magnus.Core.Entities.InvoicePayment", b =>
                {
                    b.Navigation("Installments");
                });

            modelBuilder.Entity("Magnus.Core.Entities.Product", b =>
                {
                    b.Navigation("Bars");

                    b.Navigation("ProductPriceTables");
                });

            modelBuilder.Entity("Magnus.Core.Entities.Sale", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Receipts");
                });

            modelBuilder.Entity("Magnus.Core.Entities.SaleReceipt", b =>
                {
                    b.Navigation("Installments");
                });

            modelBuilder.Entity("Magnus.Core.Entities.TransferWarehouse", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Magnus.Core.Entities.User", b =>
                {
                    b.Navigation("Warehouse");
                });
#pragma warning restore 612, 618
        }
    }
}
